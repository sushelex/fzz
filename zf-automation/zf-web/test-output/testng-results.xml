<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="0" total="7" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="xmlsuite" duration-ms="543948" started-at="2019-03-27T11:54:29Z" finished-at="2019-03-27T12:03:33Z">
    <groups>
    </groups>
    <test name="Single Gateway" duration-ms="543948" started-at="2019-03-27T11:54:29Z" finished-at="2019-03-27T12:03:33Z">
      <class name="zf.test.ZFAddMultipleGatewayTest">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="beforeMethod" is-config="true" duration-ms="53786" started-at="2019-03-27T11:54:29Z" finished-at="2019-03-27T11:55:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc01AddMultipleGatewayWithNewEnrollmentGroupWithRootUploadCertificate()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="Tc01AddMultipleGatewayWithNewEnrollmentGroupWithRootUploadCertificate()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="Tc01AddMultipleGatewayWithNewEnrollmentGroupWithRootUploadCertificate" duration-ms="45100" started-at="2019-03-27T11:55:23Z" finished-at="2019-03-27T11:56:08Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Expected value is : Failed      Actual value is : SUCCESS]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Expected value is : Failed      Actual value is : SUCCESS
at org.testng.Assert.fail(Assert.java:96)
at framework.ExtentReport.compareText(ExtentReport.java:156)
at zf.pages.ZFAddMultipleGatewayPage.verifyToastermessage(ZFAddMultipleGatewayPage.java:265)
at zf.pages.ZFAddMultipleGatewayPage.addMultipleGatewayNewRoot(ZFAddMultipleGatewayPage.java:97)
at zf.test.ZFAddMultipleGatewayTest.Tc01AddMultipleGatewayWithNewEnrollmentGroupWithRootUploadCertificate(ZFAddMultipleGatewayTest.java:25)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Tc01AddMultipleGatewayWithNewEnrollmentGroupWithRootUploadCertificate -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="afterMethod" is-config="true" duration-ms="1317" started-at="2019-03-27T11:56:08Z" finished-at="2019-03-27T11:56:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Tc01AddMultipleGatewayWithNewEnrollmentGroupWithRootUploadCertificate status=FAILURE method=ZFAddMultipleGatewayTest.Tc01AddMultipleGatewayWithNewEnrollmentGroupWithRootUploadCertificate()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc01AddMultipleGatewayWithNewEnrollmentGroupWithRootUploadCertificate()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="beforeMethod" is-config="true" duration-ms="43353" started-at="2019-03-27T11:56:10Z" finished-at="2019-03-27T11:56:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc02AddMultipleGatewayWithExistingEnrollmentGroup()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Tc02AddMultipleGatewayWithExistingEnrollmentGroup()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="Tc02AddMultipleGatewayWithExistingEnrollmentGroup" duration-ms="30361" started-at="2019-03-27T11:56:53Z" finished-at="2019-03-27T11:57:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Tc02AddMultipleGatewayWithExistingEnrollmentGroup -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="afterMethod" is-config="true" duration-ms="712" started-at="2019-03-27T11:57:23Z" finished-at="2019-03-27T11:57:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Tc02AddMultipleGatewayWithExistingEnrollmentGroup status=SUCCESS method=ZFAddMultipleGatewayTest.Tc02AddMultipleGatewayWithExistingEnrollmentGroup()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc02AddMultipleGatewayWithExistingEnrollmentGroup()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="beforeMethod" is-config="true" duration-ms="40554" started-at="2019-03-27T11:57:24Z" finished-at="2019-03-27T11:58:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc03AddMultipleGatewayWithNewEnrollmentGroupWithIntermediateUploadCertificate()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="Tc03AddMultipleGatewayWithNewEnrollmentGroupWithIntermediateUploadCertificate()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="Tc03AddMultipleGatewayWithNewEnrollmentGroupWithIntermediateUploadCertificate" duration-ms="2616" started-at="2019-03-27T11:58:04Z" finished-at="2019-03-27T11:58:07Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[TIMEOUT EXCEPTION element does not exist after waiting 90 seconds - Gateway]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: TIMEOUT EXCEPTION element does not exist after waiting 90 seconds - Gateway
at org.testng.Assert.fail(Assert.java:96)
at framework.ExtentReport.elementCatch(ExtentReport.java:258)
at framework.ElementManager.elementClick(ElementManager.java:63)
at framework.ElementManager.waitElementVisibleClick(ElementManager.java:701)
at zf.pages.ZFGatewayHomePage.clickAddGateway(ZFGatewayHomePage.java:166)
at zf.pages.ZFAddMultipleGatewayPage.addMultipleGatewayNewIntermediate(ZFAddMultipleGatewayPage.java:126)
at zf.test.ZFAddMultipleGatewayTest.Tc03AddMultipleGatewayWithNewEnrollmentGroupWithIntermediateUploadCertificate(ZFAddMultipleGatewayTest.java:34)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Tc03AddMultipleGatewayWithNewEnrollmentGroupWithIntermediateUploadCertificate -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="afterMethod" is-config="true" duration-ms="1114" started-at="2019-03-27T11:58:07Z" finished-at="2019-03-27T11:58:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Tc03AddMultipleGatewayWithNewEnrollmentGroupWithIntermediateUploadCertificate status=FAILURE method=ZFAddMultipleGatewayTest.Tc03AddMultipleGatewayWithNewEnrollmentGroupWithIntermediateUploadCertificate()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc03AddMultipleGatewayWithNewEnrollmentGroupWithIntermediateUploadCertificate()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="beforeMethod" is-config="true" duration-ms="39102" started-at="2019-03-27T11:58:08Z" finished-at="2019-03-27T11:58:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc04AddMultipleGatewayWithNewEnrollmentGroupWithoutMandatoryFields()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Tc04AddMultipleGatewayWithNewEnrollmentGroupWithoutMandatoryFields()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="Tc04AddMultipleGatewayWithNewEnrollmentGroupWithoutMandatoryFields" duration-ms="71590" started-at="2019-03-27T11:58:47Z" finished-at="2019-03-27T11:59:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Tc04AddMultipleGatewayWithNewEnrollmentGroupWithoutMandatoryFields -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="afterMethod" is-config="true" duration-ms="764" started-at="2019-03-27T11:59:59Z" finished-at="2019-03-27T12:00:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Tc04AddMultipleGatewayWithNewEnrollmentGroupWithoutMandatoryFields status=SUCCESS method=ZFAddMultipleGatewayTest.Tc04AddMultipleGatewayWithNewEnrollmentGroupWithoutMandatoryFields()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc04AddMultipleGatewayWithNewEnrollmentGroupWithoutMandatoryFields()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="beforeMethod" is-config="true" duration-ms="44909" started-at="2019-03-27T12:00:00Z" finished-at="2019-03-27T12:00:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc05AddMultipleGatewayWithInvalidDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="Tc05AddMultipleGatewayWithInvalidDetails()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="Tc05AddMultipleGatewayWithInvalidDetails" duration-ms="8903" started-at="2019-03-27T12:00:45Z" finished-at="2019-03-27T12:00:53Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[TIMEOUT EXCEPTION element does not exist after waiting 90 seconds - Gateway]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: TIMEOUT EXCEPTION element does not exist after waiting 90 seconds - Gateway
at org.testng.Assert.fail(Assert.java:96)
at framework.ExtentReport.elementCatch(ExtentReport.java:258)
at framework.ElementManager.elementClick(ElementManager.java:63)
at framework.ElementManager.waitElementVisibleClick(ElementManager.java:701)
at zf.pages.ZFGatewayHomePage.clickAddGateway(ZFGatewayHomePage.java:166)
at zf.pages.ZFAddMultipleGatewayPage.addMultipleGatewayWithInvalid(ZFAddMultipleGatewayPage.java:106)
at zf.test.ZFAddMultipleGatewayTest.Tc05AddMultipleGatewayWithInvalidDetails(ZFAddMultipleGatewayTest.java:45)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Tc05AddMultipleGatewayWithInvalidDetails -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="afterMethod" is-config="true" duration-ms="1353" started-at="2019-03-27T12:00:53Z" finished-at="2019-03-27T12:00:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Tc05AddMultipleGatewayWithInvalidDetails status=FAILURE method=ZFAddMultipleGatewayTest.Tc05AddMultipleGatewayWithInvalidDetails()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc05AddMultipleGatewayWithInvalidDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="beforeMethod" is-config="true" duration-ms="41508" started-at="2019-03-27T12:00:55Z" finished-at="2019-03-27T12:01:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc06AddMultipleGatewayWithLookAndFeelValidation()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Tc06AddMultipleGatewayWithLookAndFeelValidation()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="Tc06AddMultipleGatewayWithLookAndFeelValidation" duration-ms="37558" started-at="2019-03-27T12:01:36Z" finished-at="2019-03-27T12:02:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Tc06AddMultipleGatewayWithLookAndFeelValidation -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="afterMethod" is-config="true" duration-ms="689" started-at="2019-03-27T12:02:14Z" finished-at="2019-03-27T12:02:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Tc06AddMultipleGatewayWithLookAndFeelValidation status=SUCCESS method=ZFAddMultipleGatewayTest.Tc06AddMultipleGatewayWithLookAndFeelValidation()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc06AddMultipleGatewayWithLookAndFeelValidation()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="beforeMethod" is-config="true" duration-ms="39165" started-at="2019-03-27T12:02:15Z" finished-at="2019-03-27T12:02:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc06AddMultipleGatewayWithUserInterfaceValidation()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Tc06AddMultipleGatewayWithUserInterfaceValidation()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="Tc06AddMultipleGatewayWithUserInterfaceValidation" duration-ms="37552" started-at="2019-03-27T12:02:54Z" finished-at="2019-03-27T12:03:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Tc06AddMultipleGatewayWithUserInterfaceValidation -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255]" name="afterMethod" is-config="true" duration-ms="683" started-at="2019-03-27T12:03:31Z" finished-at="2019-03-27T12:03:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Tc06AddMultipleGatewayWithUserInterfaceValidation status=SUCCESS method=ZFAddMultipleGatewayTest.Tc06AddMultipleGatewayWithUserInterfaceValidation()[pri:0, instance:zf.test.ZFAddMultipleGatewayTest@4b9e255] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void zf.test.ZFAddMultipleGatewayTest.Tc06AddMultipleGatewayWithUserInterfaceValidation()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- zf.test.ZFAddMultipleGatewayTest -->
      <class name="framework.Hooks">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:framework.Hooks@4f51b3e0]" name="beforeTest" is-config="true" duration-ms="407" started-at="2019-03-27T11:54:29Z" finished-at="2019-03-27T11:54:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:framework.Hooks@4f51b3e0]" name="afterTest" is-config="true" duration-ms="767" started-at="2019-03-27T12:03:32Z" finished-at="2019-03-27T12:03:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- framework.Hooks -->
    </test> <!-- Single Gateway -->
  </suite> <!-- xmlsuite -->
</testng-results>
